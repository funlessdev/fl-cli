// Copyright 2022 Giuseppe De Palma, Matteo Trentin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DockerShell is an autogenerated mock type for the DockerShell type
type DockerShell struct {
	mock.Mock
}

// ComposeDown provides a mock function with given fields: composeFilePath
func (_m *DockerShell) ComposeDown(composeFilePath string) error {
	ret := _m.Called(composeFilePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(composeFilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ComposeList provides a mock function with given fields:
func (_m *DockerShell) ComposeList() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComposeUp provides a mock function with given fields: composeFilePath
func (_m *DockerShell) ComposeUp(composeFilePath string) error {
	ret := _m.Called(composeFilePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(composeFilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDockerShell interface {
	mock.TestingT
	Cleanup(func())
}

// NewDockerShell creates a new instance of DockerShell. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDockerShell(t mockConstructorTestingTNewDockerShell) *DockerShell {
	mock := &DockerShell{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
